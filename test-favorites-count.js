// Script de test pour v√©rifier le comptage des favoris
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (utiliser les m√™mes cl√©s que dans config.ts)
const supabaseUrl = 'https://jeumizxzlwjvgerrcpjr.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpldW1penh6bHdqdmdlcnJjcGpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1NTczNjEsImV4cCI6MjA2NjEzMzM2MX0.KnkibttgTcUkz0KZYzRxTeybghlCj_VnnVlcDyUFZ-Q';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testFavoritesCount() {
  try {
    console.log('üß™ Test du comptage des favoris...\n');

    // R√©cup√©rer un utilisateur de test (remplacer par un vrai user_id)
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);

    if (usersError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è Aucun utilisateur trouv√© pour le test');
      return;
    }

    const testUserId = users[0].id;
    console.log(`üë§ Utilisateur de test: ${testUserId}\n`);

    // 1. Compter les commerces favoris
    const { count: businessesCount, error: businessesError } = await supabase
      .from('favorite_businesses')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', testUserId);

    if (businessesError) {
      console.error('‚ùå Erreur lors du comptage des commerces favoris:', businessesError);
    } else {
      console.log(`üè™ Commerces favoris: ${businessesCount || 0}`);
    }

    // 2. Compter les articles favoris
    const { count: menuItemsCount, error: menuItemsError } = await supabase
      .from('favorite_menu_items')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', testUserId);

    if (menuItemsError) {
      console.error('‚ùå Erreur lors du comptage des articles favoris:', menuItemsError);
    } else {
      console.log(`üçΩÔ∏è Articles favoris: ${menuItemsCount || 0}`);
    }

    // 3. Total des favoris
    const totalFavorites = (businessesCount || 0) + (menuItemsCount || 0);
    console.log(`\nüìä Total des favoris: ${totalFavorites}`);

    // 4. V√©rifier les donn√©es brutes
    console.log('\nüîç V√©rification des donn√©es brutes...');
    
    const { data: favoriteBusinesses, error: fbError } = await supabase
      .from('favorite_businesses')
      .select('*')
      .eq('user_id', testUserId);

    if (fbError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des commerces favoris:', fbError);
    } else {
      console.log(`üìã Commerces favoris (donn√©es): ${favoriteBusinesses?.length || 0}`);
      if (favoriteBusinesses && favoriteBusinesses.length > 0) {
        favoriteBusinesses.forEach((fav, index) => {
          console.log(`  ${index + 1}. Business ID: ${fav.business_id}, Cr√©√©: ${fav.created_at}`);
        });
      }
    }

    const { data: favoriteMenuItems, error: fmError } = await supabase
      .from('favorite_menu_items')
      .select('*')
      .eq('user_id', testUserId);

    if (fmError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des articles favoris:', fmError);
    } else {
      console.log(`üìã Articles favoris (donn√©es): ${favoriteMenuItems?.length || 0}`);
      if (favoriteMenuItems && favoriteMenuItems.length > 0) {
        favoriteMenuItems.forEach((fav, index) => {
          console.log(`  ${index + 1}. Menu Item ID: ${fav.menu_item_id}, Cr√©√©: ${fav.created_at}`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
testFavoritesCount();
