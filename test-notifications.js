const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (remplacez par vos vraies cl√©s)
const supabaseUrl = 'VOTRE_SUPABASE_URL';
const supabaseKey = 'VOTRE_SUPABASE_ANON_KEY';

const supabase = createClient(supabaseUrl, supabaseKey);

// ID d'un utilisateur de test (remplacez par un vrai ID utilisateur)
const TEST_USER_ID = 'VOTRE_USER_ID_DE_TEST';

// Fonction pour cr√©er des notifications de test
async function createTestNotifications() {
  console.log('üöÄ Cr√©ation de notifications de test...');

  const testNotifications = [
    {
      user_id: TEST_USER_ID,
      type: 'order',
      title: 'Commande confirm√©e',
      message: 'Votre commande #12345 a √©t√© confirm√©e et est en cours de pr√©paration.',
      priority: 'medium',
      is_read: false,
      data: { order_id: '12345', business_name: 'Restaurant Test' }
    },
    {
      user_id: TEST_USER_ID,
      type: 'delivery',
      title: 'Livraison en cours',
      message: 'Votre commande est en cours de livraison. Le livreur arrive dans 15 minutes.',
      priority: 'high',
      is_read: false,
      data: { order_id: '12345', driver_name: 'Mamadou Diallo' }
    },
    {
      user_id: TEST_USER_ID,
      type: 'reservation',
      title: 'R√©servation confirm√©e',
      message: 'Votre r√©servation pour le 15 d√©cembre √† 19h00 a √©t√© confirm√©e.',
      priority: 'medium',
      is_read: true,
      data: { reservation_id: '67890', business_name: 'Restaurant Test' }
    },
    {
      user_id: TEST_USER_ID,
      type: 'payment',
      title: 'Paiement r√©ussi',
      message: 'Votre paiement de 25,000 GNF a √©t√© trait√© avec succ√®s.',
      priority: 'low',
      is_read: false,
      data: { amount: 25000, method: 'mobile_money' }
    },
    {
      user_id: TEST_USER_ID,
      type: 'promo',
      title: 'Offre sp√©ciale !',
      message: 'Profitez de 20% de r√©duction sur votre prochaine commande avec le code PROMO20.',
      priority: 'medium',
      is_read: false,
      data: { promo_code: 'PROMO20', discount: 20 }
    }
  ];

  try {
    // Ins√©rer les notifications de test
    const { data, error } = await supabase
      .from('notifications')
      .insert(testNotifications);

    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation des notifications:', error);
      return;
    }

    console.log('‚úÖ Notifications de test cr√©√©es avec succ√®s !');
    console.log('üì± Vous pouvez maintenant tester l\'ic√¥ne de notification dans l\'app');

    // V√©rifier le nombre de notifications cr√©√©es
    const { count } = await supabase
      .from('notifications')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', TEST_USER_ID);

    console.log(`üìä Total des notifications pour l'utilisateur: ${count}`);

    // V√©rifier le nombre de notifications non lues
    const { count: unreadCount } = await supabase
      .from('notifications')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', TEST_USER_ID)
      .eq('is_read', false);

    console.log(`üî¥ Notifications non lues: ${unreadCount}`);

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Fonction pour nettoyer les notifications de test
async function cleanupTestNotifications() {
  console.log('üßπ Nettoyage des notifications de test...');

  try {
    const { error } = await supabase
      .from('notifications')
      .delete()
      .eq('user_id', TEST_USER_ID);

    if (error) {
      console.error('‚ùå Erreur lors du nettoyage:', error);
      return;
    }

    console.log('‚úÖ Notifications de test supprim√©es avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Fonction pour afficher les notifications existantes
async function listNotifications() {
  console.log('üìã Liste des notifications existantes...');

  try {
    const { data, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', TEST_USER_ID)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
      return;
    }

    if (data.length === 0) {
      console.log('üì≠ Aucune notification trouv√©e');
      return;
    }

    console.log(`üìä ${data.length} notification(s) trouv√©e(s):`);
    data.forEach((notification, index) => {
      console.log(`${index + 1}. [${notification.is_read ? '‚úÖ' : 'üî¥'}] ${notification.title}`);
      console.log(`   ${notification.message}`);
      console.log(`   Type: ${notification.type}, Priorit√©: ${notification.priority}`);
      console.log(`   Cr√©√©e: ${new Date(notification.created_at).toLocaleString()}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
  }
}

// Ex√©cution du script
async function main() {
  const command = process.argv[2];

  switch (command) {
    case 'create':
      await createTestNotifications();
      break;
    case 'cleanup':
      await cleanupTestNotifications();
      break;
    case 'list':
      await listNotifications();
      break;
    default:
      console.log('üìñ Usage:');
      console.log('  node test-notifications.js create    - Cr√©er des notifications de test');
      console.log('  node test-notifications.js cleanup   - Supprimer les notifications de test');
      console.log('  node test-notifications.js list      - Lister les notifications existantes');
      console.log('');
      console.log('‚ö†Ô∏è  N\'oubliez pas de configurer vos cl√©s Supabase et l\'ID utilisateur de test !');
  }
}

main().catch(console.error); 