console.log('üîß Diagnostic et correction de l\'erreur "Email link is invalid or has expired"');
console.log('='.repeat(70));

console.log('‚ùå ERREUR D√âTECT√âE : Email link is invalid or has expired');
console.log('üìß Probl√®me : Le lien d\'authentification a expir√© ou la configuration est incorrecte');
console.log('');

console.log('üîç CAUSES POSSIBLES :');
console.log('');

const causes = [
  {
    name: 'Lien expir√©',
    description: 'Le lien a d√©pass√© la dur√©e de validit√© (24h par d√©faut)',
    solution: 'Demander un nouveau lien de connexion'
  },
  {
    name: 'URLs de redirection incorrectes',
    description: 'Les URLs de redirection ne sont pas configur√©es dans Supabase',
    solution: 'Configurer les URLs de redirection'
  },
  {
    name: 'Authentification par email d√©sactiv√©e',
    description: 'L\'authentification par email n\'est pas activ√©e',
    solution: 'Activer Email Auth dans Supabase'
  },
  {
    name: 'Template d\'email incorrect',
    description: 'Le template d\'email ne contient pas le bon lien',
    solution: 'V√©rifier le template d\'email'
  },
  {
    name: 'Deep links mal configur√©s',
    description: 'Les deep links ne sont pas correctement configur√©s',
    solution: 'V√©rifier la configuration des deep links'
  }
];

causes.forEach((cause, index) => {
  console.log(`${index + 1}. ${cause.name}`);
  console.log(`   Description: ${cause.description}`);
  console.log(`   Solution: ${cause.solution}`);
  console.log('');
});

console.log('üîß SOLUTIONS D√âTAILL√âES :');
console.log('');

console.log('1. üéØ V√©rifier la configuration Supabase :');
console.log('   a) Allez sur : https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/providers');
console.log('   b) V√©rifiez que "Email Auth" est activ√©');
console.log('   c) Activez "Enable email confirmations"');
console.log('   d) Activez "Enable email change confirmations"');
console.log('');

console.log('2. üîó Configurer les URLs de redirection :');
console.log('   a) Allez sur : https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/url-configuration');
console.log('   b) Dans "Site URL", entrez : https://braprime.com (ou votre domaine)');
console.log('   c) Dans "Redirect URLs", ajoutez :');
console.log('');

const redirectUrls = [
  'braprime://login-callback',
  'exp://localhost:8081/--/login-callback',
  'exp://192.168.1.106:8081/--/login-callback',
  'http://localhost:8081/--/login-callback',
  'http://192.168.1.106:8081/--/login-callback'
];

redirectUrls.forEach((url, index) => {
  console.log(`      ${index + 1}. ${url}`);
});

console.log('');
console.log('3. üìß V√©rifier le template d\'email :');
console.log('   a) Allez sur : https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/templates');
console.log('   b) S√©lectionnez "Confirm signup"');
console.log('   c) V√©rifiez que le template contient : {{ .ConfirmationURL }}');
console.log('');

console.log('4. ‚è∞ Augmenter la dur√©e de validit√© (optionnel) :');
console.log('   a) Dans Supabase Dashboard > Settings > Auth');
console.log('   b) Cherchez "JWT expiry" ou "Token expiry"');
console.log('   c) Augmentez la valeur (par d√©faut 3600 secondes = 1 heure)');
console.log('');

console.log('5. üîÑ Am√©liorer la gestion d\'erreur dans l\'application :');
console.log('');

const improvedErrorHandling = `
// Dans lib/contexts/AuthContext.tsx, am√©liorer la gestion d'erreur :

const signInWithEmail = async (email: string) => {
  setLoading(true);
  setError(null);
  setMagicLinkSent(false);
  
  try {
    console.log('üîê Tentative de connexion avec l\'email:', email);
    
    const { error } = await supabase.auth.signInWithOtp({ 
      email: email,
      options: {
        shouldCreateUser: true,
        emailRedirectTo: 'braprime://login-callback'
      }
    });
    
    if (error) {
      console.error('‚ùå Erreur de connexion:', error);
      
      // Gestion sp√©cifique des erreurs
      if (error.message.includes('expired') || error.message.includes('invalid')) {
        setError('Le lien de connexion a expir√©. Veuillez demander un nouveau lien.');
      } else {
        setError(error.message);
      }
      return { error };
    }
    
    console.log('‚úÖ Magic link envoy√© avec succ√®s');
    setMagicLinkSent(true);
    return { success: true };
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
    console.error('‚ùå Exception lors de la connexion:', err);
    setError(errorMessage);
    return { error: { message: errorMessage } };
  } finally {
    setLoading(false);
  }
};
`;

console.log(improvedErrorHandling);

console.log('üß™ PROC√âDURE DE TEST :');
console.log('');

console.log('1. Configurez les URLs de redirection dans Supabase');
console.log('2. V√©rifiez que l\'authentification par email est activ√©e');
console.log('3. Testez avec un nouvel email (pas un lien expir√©)');
console.log('4. Lancez l\'application : npm start');
console.log('5. Testez l\'authentification avec une nouvelle adresse email');
console.log('');

console.log('üîç V√âRIFICATIONS √Ä EFFECTUER :');
console.log('');

console.log('‚úÖ Email Auth activ√© dans Supabase');
console.log('‚úÖ URLs de redirection configur√©es');
console.log('‚úÖ Template d\'email correct');
console.log('‚úÖ Deep links configur√©s dans app.json');
console.log('‚úÖ √âcran login-callback cr√©√©');
console.log('‚úÖ Gestion d\'erreur am√©lior√©e');
console.log('');

console.log('üìû LIENS DE CONFIGURATION :');
console.log('- Auth Providers: https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/providers');
console.log('- URL Configuration: https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/url-configuration');
console.log('- Auth Templates: https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/templates');
console.log('- Auth Settings: https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/auth/settings');
console.log('- Logs: https://supabase.com/dashboard/project/gehvdncxbcfotnabmjmo/logs'); 